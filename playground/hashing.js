// const {SHA256} = require('crypto-js');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');

/**
 * Playing with bcryptjs for password hashing
*/
const password = '1123abc!';

/**
 * genSalt() takes 2 parameters, first is the numbers of rounds
 * it would use to generate the Salt, the higher the number, the longer
 * the algorithm is gonna take. It also prevents brute force, as it would
 * reduce the number of request per second, since it is going to take
 * longer to preocess.
 * 
 * The second parameter is the callback, with a error message, in case there
 * is one, and the salt
 * 
 * So now calling the hash() function will take 3 parameters, the plain
 * text password, the salt generated by the genSalt, and the callback with error
 * or the hashed/salted password.
 */
bcrypt.genSalt(10, (err, salt) => {
  bcrypt.hash(password, salt, (err, hash) => {
    console.log(hash);
  });
});

// Hashed and Salted password
const hashedPassword = '$2a$10$crqC6KeCpTpcpR8OaYoBmuWlj8r2XRgFOjoNR/hFYfkiiF.xACWNu';

/**
 * With the compare() function, it is possible to compare the plain text 
 * password with the hashed/salted password.
 * 
 * It takes two parametes, the plain text password and the 
 * hashed/salted password, and also the callback, with error or
 * the response, which will be a boolean true or false.
 */
bcrypt.compare(password, hashedPassword, (err, res) => {
  console.log(res);
});

 /**
  * Implementing jwt for hashing and validation
  */
// jwt.sign // Takes the object and create/return the hash
// jwt.verify // Takes the tokes and validate it

// const data = {
//   id: 10
// }

// const token = jwt.sign(data, '123abc');
// console.log(token);

// const decoded = jwt.verify(token, '123abc');
// console.log(`decoded ${JSON.stringify(decoded)}`);

/**
 * Playing with crypto-js package
*/
// const message = 'I am user number 3';
// const hash = SHA256(message).toString();

// console.log(`Message: ${message}`);
// console.log(`Hash: ${hash}`);

// const data = {
//   id: 4
// };
// const token = {
//   data: data,
//   hash: SHA256(JSON.stringify(data) + 'somesecret').toString()
// }

// token.data.id = 5;
// token.hash =  SHA256(JSON.stringify(token.data)).toString();

// const resultHash = SHA256(JSON.stringify(token.data) + 'somesecret').toString();

// if (resultHash === token.hash){
//   console.log('Data not changed.');
// } else {
//   console.log('Data changed, do not trust.')
// }